--  REST API Validation
--  API to validate
--
--  The version of the OpenAPI document: 1.0.0
--  Contact: Stephane.Carrez@gmail.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.11.0-2024-11-24.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body Enums.Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use OpenAPI.Streams;

   procedure Serialize
     (Into  : in out OpenAPI.Streams.Output_Stream'Class;
      Name  : in     String;
      Value : in     Enums.Models.Error_Type)
   is
   begin
      Into.Start_Entity (Name);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Error_Type.Is_Null then
         Into.Write_Entity ("error_type", Value.Error_Type);
      end if;
      if not Value.Param.Is_Null then
         Into.Write_Entity ("param", Value.Param);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Deserialize
     (From  : in     OpenAPI.Value_Type;
      Name  : in     String;
      Value :    out Enums.Models.Error_Type)
   is
      Object : OpenAPI.Value_Type;
   begin
      OpenAPI.Streams.Deserialize (From, Name, Object);
      OpenAPI.Streams.Deserialize (Object, "message", Value.Message);
      OpenAPI.Streams.Deserialize (Object, "error_type", Value.Error_Type);
      OpenAPI.Streams.Deserialize (Object, "param", Value.Param);
      OpenAPI.Streams.Deserialize (Object, "code", Value.Code);
   end Deserialize;

   function To_Mode_Type (Value : in String) return Enums.Models.Mode_Type is
   begin
      if Value = "fast" then
         return FAST;
      end if;
      if Value = "optimized" then
         return OPTIMIZED;
      end if;
      if Value = "accurate" then
         return ACCURATE;
      end if;
      raise Constraint_Error;
   end To_Mode_Type;

   function To_String (Value : in Enums.Models.Mode_Type) return String is
   begin
      case Value is
         when FAST =>
            return "fast";

         when OPTIMIZED =>
            return "optimized";

         when ACCURATE =>
            return "accurate";

      end case;
   end To_String;

   procedure Serialize
     (Into  : in out OpenAPI.Streams.Output_Stream'Class;
      Name  : in     String;
      Value : in     Enums.Models.Mode_Type)
   is
   begin
      Into.Write_Entity (Name, To_String (Value));
   end Serialize;

   procedure Deserialize
     (From  : in     OpenAPI.Value_Type;
      Name  : in     String;
      Value :    out Enums.Models.Mode_Type)
   is
      Object : OpenAPI.Value_Type;
   begin
      OpenAPI.Streams.Deserialize (From, Name, Object);
      Value := To_Mode_Type (OpenAPI.To_String (Object));
   end Deserialize;

   function To_Status_Type (Value : in String) return Enums.Models.Status_Type
   is
   begin
      if Value = "open" then
         return OPEN;
      end if;
      if Value = "onhold" then
         return ONHOLD;
      end if;
      if Value = "assigned" then
         return ASSIGNED;
      end if;
      if Value = "closed" then
         return CLOSED;
      end if;
      if Value = "rejected" then
         return REJECTED;
      end if;
      raise Constraint_Error;
   end To_Status_Type;

   function To_String (Value : in Enums.Models.Status_Type) return String is
   begin
      case Value is
         when OPEN =>
            return "open";

         when ONHOLD =>
            return "onhold";

         when ASSIGNED =>
            return "assigned";

         when CLOSED =>
            return "closed";

         when REJECTED =>
            return "rejected";

      end case;
   end To_String;

   procedure Serialize
     (Into  : in out OpenAPI.Streams.Output_Stream'Class;
      Name  : in     String;
      Value : in     Enums.Models.Status_Type)
   is
   begin
      Into.Write_Entity (Name, To_String (Value));
   end Serialize;

   procedure Serialize
     (Into  : in out OpenAPI.Streams.Output_Stream'Class;
      Name  : in     String;
      Value : in     Status_Type_Vectors.Vector)
   is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize
     (From  : in     OpenAPI.Value_Type;
      Name  : in     String;
      Value :    out Enums.Models.Status_Type)
   is
      Object : OpenAPI.Value_Type;
   begin
      OpenAPI.Streams.Deserialize (From, Name, Object);
      Value := To_Status_Type (OpenAPI.To_String (Object));
   end Deserialize;

   procedure Deserialize
     (From  : in     OpenAPI.Value_Type;
      Name  : in     String;
      Value : in out Status_Type_Vectors.Vector)
   is
      List : OpenAPI.Value_Array_Type;
      Item : Enums.Models.Status_Type;
   begin
      Value.Clear;
      OpenAPI.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize
     (Into  : in out OpenAPI.Streams.Output_Stream'Class;
      Name  : in     String;
      Value : in     Enums.Models.Stat_Type)
   is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("count", Value.Count);
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "mode", Value.Mode);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize
     (Into  : in out OpenAPI.Streams.Output_Stream'Class;
      Name  : in     String;
      Value : in     Stat_Type_Vectors.Vector)
   is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize
     (From  : in     OpenAPI.Value_Type;
      Name  : in     String;
      Value :    out Enums.Models.Stat_Type)
   is
      Object : OpenAPI.Value_Type;
   begin
      OpenAPI.Streams.Deserialize (From, Name, Object);
      OpenAPI.Streams.Deserialize (Object, "count", Value.Count);
      OpenAPI.Streams.Deserialize (Object, "value", Value.Value);
      OpenAPI.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "mode", Value.Mode);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize
     (From  : in     OpenAPI.Value_Type;
      Name  : in     String;
      Value : in out Stat_Type_Vectors.Vector)
   is
      List : OpenAPI.Value_Array_Type;
      Item : Enums.Models.Stat_Type;
   begin
      Value.Clear;
      OpenAPI.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

end Enums.Models;
